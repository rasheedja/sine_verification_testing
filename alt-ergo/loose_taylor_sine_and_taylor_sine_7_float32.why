logic eps : real
logic sn : real

goal looseRoundingError :
  forall x:real.
    0.0 <= x <= 0.75 -> eps = 1.0/8388608.0 -> sn = 1.0/85070591730234615865843651857942052864.0 ->
      (* Lower estimate *)
      ((x * (1.0 - (x * x) * (1.0 / 6.0 - (x * x) * (1.0 / 120.0 - (x * x) / 5040.0)))) -
      (x * 
        ((1.0 - ((((x * x + sn) * (1.0 + eps)) * 
          ((((1.0 / 6.0 + sn) * (1.0 + eps)) - ((((x * x + sn) * (1.0 - eps)) * 
            ((((1.0 / 120.0 + sn) * (1.0 - eps)) - ((((x * x + sn) * (1.0 + eps)) / 5040.0 + sn) * (1.0 + eps)) + sn) * (1.0 - eps)) 
          + sn) * (1.0 - eps)) + sn) * (1.0 - eps))
        + sn) * (1.0 + eps)) + sn) * (1.0 - eps))
      + sn) * (1.0 - eps) <= 0.1)

      and
      (* Upper estimate *)
      ((x * (1.0 - (x * x) * (1.0 / 6.0 - (x * x) * (1.0 / 120.0 - (x * x) / 5040.0)))) -
      (x * 
                       ((1 - ((((x * x + sn) * (1 - eps)) * 
                           ((((1 / 6.0 + sn) * (1 - eps)) - ((((x * x + sn) * (1 + eps)) * 
                               ((((1 / 120.0 + sn) * (1 + eps)) - ((((x * x + sn) * (1 - eps)) / 5040.0 + sn) * (1 - eps)) + sn) * (1 + eps))
                           + sn) * (1 + eps)) + sn) * (1 + eps))
                       + sn) * (1 - eps)) + sn) * (1 + eps))
                   + sn) * (1 + eps) <= 0.1)