module Reals__real
 use "real".RealInfix
 use "int".Int

 type real__ = real

 function bool_eq (a : real__) (b : real__) : bool = a = b
 val bool_eq (a : real__) (b : real__) : bool
  ensures { result <-> (a = b) }

 val function user_eq (a : real__) (b : real__) : bool

 val function value__size : int

 val function object__size (a : real__) : int

 axiom value__size_axiom :
  value__size >= 0

 axiom object__size_axiom :
  forall a  : real__. (object__size a >= 0)

 predicate dynamic_invariant real__ bool bool bool bool = true
 
 predicate default_initial_assumption real__ bool = true

end

module Reals__Oadd
 use real.RealInfix
 let function oadd__logic (x : real) (y : real) : real = x +. y
 let function oadd (x : real) (y : real) : real = x +. y
end

module Reals__Osubtract
 use real.RealInfix
 let function osubtract__logic (x : real) (y : real) : real = x -. y
 let function osubtract (x : real) (y : real) : real = x -. y
end

module Reals__Omultiply
 use real.RealInfix
 let function omultiply__logic (x : real) (y : real) : real = x *. y
 let function omultiply (x : real) (y : real) : real = x *. y
end

module Reals__Odivide
 use real.RealInfix
 function odivide__logic (x : real) (y : real) : real = x /. y
 val odivide__logic (x : real) (y : real) : real
 ensures { result = (x /. y) }
 function odivide (x : real) (y : real) : real = x /. y
 val odivide (x : real) (y : real) : real
 ensures { result = (x /. y) }
end

module Reals__Olt
 use real.RealInfix
 let function olt__logic (x : real) (y : real) : bool = x <. y
 let function olt (x : real) (y : real) : bool = x <. y
end

module Reals__Ole
 use real.RealInfix
 let function ole__logic (x : real) (y : real) : bool = x <=. y
 let function ole (x : real) (y : real) : bool = x <=. y
end

module Reals__Ogt
 use real.RealInfix
 let function ogt__logic (x : real) (y : real) : bool = x >. y
 let function ogt (x : real) (y : real) : bool = x >. y
end

module Reals__Oge
 use real.RealInfix
 let function oge__logic (x : real) (y : real) : bool = x >=. y
 let function oge (x : real) (y : real) : bool = x >=. y
end

module Reals__real_from_int
 use real.FromInt
 
 function real_from_int__logic (x : int) : real = from_int x 
 val real_from_int (x : int) : real
  ensures { result = real_from_int__logic x }
end

module Reals__real_from_float
 use ieee_float.Float32
 
 function real_from_float__logic (x : t) : real = t'real x
 val real_from_float (x : t) : real
  ensures { result = real_from_float__logic x }
end

module Reals__real_from_long_float
 use ieee_float.Float64
 
 function real_from_long_float__logic (x : t) : real = t'real x
 val real_from_long_float (x : t) : real
  ensures { result = real_from_long_float__logic x }
end

module Reals__real_abs
 use real.Abs
 
 function real_abs__logic (x : real) : real = abs x
 val real_abs (x : real) : real
  ensures { result = real_abs__logic x }
end

module Reals__ri
 use real.FromInt
 
 function ri__logic (x : int) : real = from_int x 
 val ri (x : int) : real
  ensures { result = ri__logic x }
end

module Reals__rf
 use ieee_float.Float32
 
 function rf__logic (x : t) : real = t'real x
 val rf (x : t) : real
  ensures { result = rf__logic x }
end

module Reals__rlf
 use ieee_float.Float64
 
 function rlf__logic (x : t) : real = t'real x
 val rlf (x : t) : real
  ensures { result = rlf__logic x }
end

module Reals__rabs
 use real.Abs
 
 function rabs__logic (x : real) : real = abs x
 val rabs (x : real) : real
  ensures { result = rabs__logic x }
end

module Reals__real_sin
 use real.Trigonometry

 function real_sin__logic (x : real) : real = sin x
 val real_sin (x : real) : real
  ensures { result = real_sin__logic x }
end

module Reals__real_cos
 use real.Trigonometry

 function real_cos__logic (x : real) : real = cos x
 val real_cos (x : real) : real
  ensures { result = real_cos__logic x }
end

module Reals__real_square
 use real.Square

 function real_square__logic (x : real) : real = sqr x
 val real_square (x : real) : real
  ensures { result = real_square__logic x }
end

module Reals__real_square_root
 use real.Square

 function real_square_root__logic (x : real) : real = sqrt x
 val real_square_root (x : real) : real
  ensures { result = real_square_root__logic x }
end

module Reals__real_pow
 use real.PowerReal
 
 function real_pow__logic (x : real) (y : real) : real = pow x y
 val real_pow (x : real) (y : real) : real
  ensures { result = real_pow__logic x y }
end
