--------------------------- Local Context ---------------------------

constant Eps : t

axiom H8 : dynamic_invariant3 Eps True False True True

axiom H7 : dynamic_invariant3 X True False True True

axiom H6 : dynamic_invariant4 N True False True True

axiom H5 :
  ((ge X (0.500000000000000000000000:t) /\ le X (2.0:t)) /\ N <=' 5) /\
  eq Eps (0.0000001192092895507812500000000000000000000000:t)

constant Y : t

axiom H4 : Y = (1.0:t)

axiom H3 : dynamic_invariant3 Y True False True True

constant i : int

axiom H2 : i = 1

axiom H1 :
  not andb (if 1 <=' i then True else False)
      (if i <=' N then True else False) = True

constant Heron : t

axiom H : Heron = Y

------------------------------- Goal --------------------------------

goal VC def :
  ole__logic
  (real_abs__logic
   (osubtract__logic (real_square_root__logic (real_from_float__logic X))
    (real_from_float__logic Heron)))
  (odivide__logic
   (real_from_float__logic (power (add_rne (1.0:t) Eps) (2 *' N)))
   (real_from_int__logic (power1 2 (power1 2 N))))
  = True

------------------------------- Human-Friendly Goal --------------------------------

goal VC def :
  ((Rabs (Rsqrt (Rf X)) R- (Rf Heron)) <=
    (Rf (1.0:t + Eps) ^ (2 *' N)) R/ (Ri (2 ^ (2 ^ N))))
  = True

SMT solvers fail, gappa via why3 fails

------------------------------- Notes --------------------------------
For some reason, 'Heron' in this VC actually refers to the real number Y

'R' prefix indicates a function that works on real numbers.
  R-, R/, etc. are the 'Real' mathematical operators that were imported to SPARK and then used in SPARK assertions
